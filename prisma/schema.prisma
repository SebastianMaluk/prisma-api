generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  groups    Group[]
}

model Group {
  id       Int       @id @default(autoincrement())
  name     String
  size     Int
  students Student[]
}

model Evaluation {
  id           Int        @id @default(autoincrement())
  name         String
  creationDate DateTime   @default(now())
  closingDate  DateTime
  questions    Question[]
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String
  questions Question[]
}

model Question {
  id          Int          @id @default(autoincrement())
  type        String
  difficulty  Int
  tags        Tag[]
  evaluations Evaluation[]

  QuestionBoolean QuestionBoolean?
  QuestionChoice  QuestionChoice?
  QuestionOpen    QuestionOpen?
}

model QuestionBoolean {
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  text   String
  answer Boolean

  @@id([questionId])
}

// Multiple choice question
model QuestionChoice {
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])

  text String

  answerList QuestionChoiceList?

  answer   QuestionChoiceItem? @relation(fields: [answerId], references: [id])
  answerId Int                 @unique

  @@id([questionId])
}

model QuestionChoiceList {
  id   Int    @id @default(autoincrement())
  name String

  questionChoice   QuestionChoice @relation(fields: [questionChoiceId], references: [questionId])
  questionChoiceId Int            @unique

  QuestionChoiceItem QuestionChoiceItem[]
}

model QuestionChoiceItem {
  id    Int    @id @default(autoincrement())
  value String

  questionChoiceList   QuestionChoiceList @relation(fields: [questionChoiceListId], references: [id])
  questionChoiceListId Int                @unique

  QuestionChoice QuestionChoice?
}

model QuestionOpen {
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String

  answerList QuestionOpenList[]

  answer   QuestionOpenListItem? @relation(fields: [answerId], references: [id])
  answerId Int                   @unique

  @@id([questionId])
}

model QuestionOpenList {
  id          Int                    @id @default(autoincrement())
  name        String
  answerItems QuestionOpenListItem[]

  questionOpen   QuestionOpen @relation(fields: [questionOpenId], references: [questionId])
  questionOpenId Int
}

model QuestionOpenListItem {
  id    Int    @id @default(autoincrement())
  value String

  questionOpenList   QuestionOpenList @relation(fields: [questionOpenListId], references: [id])
  questionOpenListId Int

  QuestionOpen QuestionOpen?
}
